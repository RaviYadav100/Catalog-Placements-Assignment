
--------------------------------------------------------------------// Problem Statement //--------------------------------------------------------------



In this assignment, you'll work on a simplified version of Shamir's Secret Sharing algorithm.

Consider an unknown polynomial of degree m. You would require m+1 roots of the polynomial to solve for the coefficients, represented as k = m + 1.
An unknown polynomial of degree m can be represented as:
f(x) = a_m x^m + a_{m-1} x^{m-1} + ... + a_1 x + c
Where:
f(x) is the polynomial function
m is the degree of the polynomial
a_m, a_{m-1}, ..., a_1, c are coefficients (real numbers)
a_m ≠ 0 (since it's the highest degree term, ensuring the polynomial is of degree m)
This representation shows that a polynomial of degree m is a sum of terms, where each term is a coefficient multiplied by a power of x. The highest power of x is m, and the powers decrease by 1 for each subsequent term until we reach the constant term c, which has no x.
The task is to find the constant term i.e, ‘c’ of the polynomial with the given roots. However, the points are not provided directly but in a specific format.
You need to read the input from the test cases provided in JSON format.
Sample Test Case:
{
    "keys": {
        "n": 4,
        "k": 3
    },
    "1": {
        "base": "10",
        "value": "4"
    },
    "2": {
        "base": "2",
        "value": "111"
    },
    "3": {
        "base": "10",
        "value": "12"
    },
    "6": {
        "base": "4",
        "value": "213"
    }
}
​
n: The number of roots provided in the given JSON
k: The minimum number of roots required to solve for the coefficients of the polynomial
k = m + 1, where m is the degree of the polynomial
Root Format Example:
"2": {
    "base": "2",
    "value": "111"
}
​
Consider the above root as (x, y):
x is the key of the object (in this case, x = 2)
y value is encoded with a given base
Decode y value: 111 in base 2 is 7
Therefore, x = 2 and y = 7
You can use any known method to find the coefficients of the polynomial, such as:
Lagrange interpolation
Matrix method
Gauss elimination
Solve for the constant term of the polynomial, typically represented as c.
Assignment Checkpoints:
1. Read the Test Case (Input) from a  separate JSON file
Parse and read the input provided in JSON format from a separate file, which contains a series of polynomial roots
2. Decode the Y Values
Correctly decode the Y values that are encoded using different bases
3. Find the Secret (C)
Calculate the secret c using the decoded Y values and any known method
Constraints:
All the coefficients a_m, a_{m-1}, ..., a_1, c are positive integers.
The coefficients are within the range of a 256-bit number.
The minimum number of roots provided (n) will always be greater than or equal to k (the minimum number of roots required).
The degree of the polynomial (m) is determined as m = k−1, where k is provided in the input.
  
Output: Print secret for both the testcases simultaneously.
Hint: Although you can't test your code against the test case in a testing environment, you can double-check it manually by solving the polynomial on paper and comparing the outputs.
Good luck!

Find the second testcase here.
{
"keys": {
    "n": 10,
    "k": 7
  },
  "1": {
    "base": "6",
    "value": "13444211440455345511"
  },
  "2": {
    "base": "15",
    "value": "aed7015a346d63"
  },
  "3": {
    "base": "15",
    "value": "6aeeb69631c227c"
  },
  "4": {
    "base": "16",
    "value": "e1b5e05623d881f"
  },
  "5": {
    "base": "8",
    "value": "316034514573652620673"
  },
  "6": {
    "base": "3",
    "value": "2122212201122002221120200210011020220200"
  },
  "7": {
    "base": "3",
    "value": "20120221122211000100210021102001201112121"
  },
  "8": {
    "base": "6",
    "value": "20220554335330240002224253"
  },
  "9": {
    "base": "12",
    "value": "45153788322a1255483"
  },
  "10": {
    "base": "7",
    "value": "1101613130313526312514143"
  }
}

-------------------------------------------------------// Solution of the given problem statement //---------------------------------------------------------


#include <bits/stdc++.h>
#include <gmpxx.h>
#include <fstream>
using namespace std;


struct fraction {
    mpz_class num, den;
    fraction(mpz_class n, mpz_class d) : num(n), den(d) {
        reduce();
    }
    void reduce() {
        mpz_class g = gcd(abs(num), abs(den));
        num /= g;
        den /= g;
        if (den < 0) {
            num = -num;
            den = -den;
        }
    }
    fraction operator*(const fraction& f) const {
        fraction temp(num * f.num, den * f.den);
        temp.reduce();
        return temp;
    }
    fraction operator+(const fraction& f) const {
        fraction temp(num * f.den + f.num * den, den * f.den);
        temp.reduce();
        return temp;
    }
};


class SimpleJSONParser {
private:
    string content;
    size_t pos;
    
    void skipWhitespace() {
        while (pos < content.length() && (content[pos] == ' ' || content[pos] == '\t' || 
               content[pos] == '\n' || content[pos] == '\r')) {
            pos++;
        }
    }
    
    string parseString() {
        if (content[pos] != '"') return "";
        pos++; 
        string result;
        while (pos < content.length() && content[pos] != '"') {
            result += content[pos];
            pos++;
        }
        pos++; 
        return result;
    }
    
    string parseNumber() {
        string result;
        while (pos < content.length() && (isdigit(content[pos]) || content[pos] == '-')) {
            result += content[pos];
            pos++;
        }
        return result;
    }
    
public:
    struct ShareData {
        string base;
        string value;
    };
    
    struct JSONData {
        int n, k;
        map<int, ShareData> shares;
    };
    
    SimpleJSONParser(const string& json_content) : content(json_content), pos(0) {}
    
    JSONData parse() {
        JSONData data;
        pos = 0;
        skipWhitespace();
        
        if (content[pos] != '{') return data;
        pos++; 
        
        while (pos < content.length()) {
            skipWhitespace();
            if (content[pos] == '}') break;
            if (content[pos] == ',') pos++;
            
            skipWhitespace();
            string key = parseString();
            skipWhitespace();
            
            if (content[pos] != ':') break;
            pos++; 
            skipWhitespace();
            
            if (key == "keys") {
                
                if (content[pos] != '{') break;
                pos++; 
                
                while (pos < content.length()) {
                    skipWhitespace();
                    if (content[pos] == '}') {
                        pos++;
                        break;
                    }
                    if (content[pos] == ',') pos++;
                    
                    skipWhitespace();
                    string subkey = parseString();
                    skipWhitespace();
                    
                    if (content[pos] != ':') break;
                    pos++; 
                    skipWhitespace();
                    
                    string value = parseNumber();
                    
                    if (subkey == "n") data.n = stoi(value);
                    else if (subkey == "k") data.k = stoi(value);
                }
            } else {
                
                int shareNum = stoi(key);
                ShareData share;
                
                if (content[pos] != '{') break;
                pos++; 
                
                while (pos < content.length()) {
                    skipWhitespace();
                    if (content[pos] == '}') {
                        pos++;
                        break;
                    }
                    if (content[pos] == ',') pos++;
                    
                    skipWhitespace();
                    string subkey = parseString();
                    skipWhitespace();
                    
                    if (content[pos] != ':') break;
                    pos++; 
                    skipWhitespace();
                    
                    string value = parseString();
                    
                    if (subkey == "base") share.base = value;
                    else if (subkey == "value") share.value = value;
                }
                
                data.shares[shareNum] = share;
            }
        }
        
        return data;
    }
};


mpz_class decode_value(const string& value, const string& base) {
    return mpz_class(value, stoi(base));
}


mpz_class lagrange_interpolation(const vector<mpz_class>& x, const vector<mpz_class>& y, int k) {
    fraction ans(0, 1);
    for (int i = 0; i < k; ++i) {
        fraction l(y[i], 1);
        for (int j = 0; j < k; ++j) {
            if (i != j) {
                fraction temp(-x[j], x[i] - x[j]);
                l = l * temp;
            }
        }
        ans = ans + l;
    }
    return ans.num;
}




mpz_class find_secret(const vector<pair<mpz_class, mpz_class>>& points, int k) {
    
    vector<mpz_class> x(k), y(k);
    
    for (int i = 0; i < k; ++i) {
        x[i] = points[i].first;
        y[i] = points[i].second;
    }
    
    return lagrange_interpolation(x, y, k);
}


void process_json(const string& filename, vector<mpz_class>& secrets, int test_case) {
    
    ifstream ifs(filename);
    if (!ifs.is_open()) {
        cout << "Test Case " << test_case << ": Error: Cannot open JSON file " << filename << endl;
        return;
    }
    
    string json_content((istreambuf_iterator<char>(ifs)), istreambuf_iterator<char>());
    ifs.close();
    
    SimpleJSONParser parser(json_content);
    SimpleJSONParser::JSONData data = parser.parse();
    
    int n = data.n;
    int k = data.k;
    vector<pair<mpz_class, mpz_class>> points;
    points.reserve(n);

    try {
        for (const auto& [shareNum, shareData] : data.shares) {
            mpz_class y = decode_value(shareData.value, shareData.base);
            points.push_back({shareNum, y});
        }
    } catch (const exception& e) {
        cout << "Test Case " << test_case << ": Error processing shares: " << e.what() << endl;
        return;
    }

    sort(points.begin(), points.end());

  
    mpz_class secret = find_secret(points, k);

 
    secrets.push_back(secret);

    cout << "Test Case " << test_case << " Secret: " << secret << endl;
}

int main() {
    vector<mpz_class> secrets;
    vector<string> filenames = {"testcase1.json", "testcase2.json"};


    for (int i = 0; i < 2; ++i) {
        process_json(filenames[i], secrets, i + 1);
    }

    cout << "\nBoth secrets found successfully!" << endl;

    return 0;
}

----------------------------------------------------------------------------- // Output of this code // -------------------------------------------------------------------------

Test Case 1 Secret: 3
Test Case 2 Secret: 79836264049851
Both secrets found successfully!
